/// The builds that correspond to packages mentioned in `sources-list-path`.
relation selected_builds(build: Build, package: Package, version: PackageVersion, krate: Krate, crate_hash: CrateHash, edition: Edition);
/// The builds of `build.rs` files.
relation build_script_builds(build: Build, package: Package, version: PackageVersion, krate: Krate, crate_hash: CrateHash, edition: Edition);
/// The modules that belong to `selected_builds`.
relation selected_modules(build: Build, module: Module);
/// The mir_cfgs that belong to `selected_builds`.
relation selected_mir_cfgs(build: Build, item: Item, body_def_path: DefPath, root_scope: Scope);
/// The scopes that belong to `selected_builds`.
relation selected_scopes(
    build: Build, mir_body_def_path: DefPath, scope: Scope, parent: Scope,
    safety: ScopeSafety, explicit_unsafe_group: u32,
    check_mode: BlockCheckMode, span: Span);
/// Type definitions that belong to `selected_builds`.
relation selected_type_defs(
    build: Build, item: Item, typ: Type, def_path: DefPath, name: InternedString,
    visibility: TyVisibility, type_kind: TyKind, def_kind: TyDefKind);
/// ADT definitions that belong to `selected_builds`.
relation selected_adts(
    build: Build, item: Item, typ: Type, def_path: DefPath, def_path2: DefPath,
    name: InternedString, visibility: TyVisibility, type_kind: TyKind, def_kind: TyDefKind,
    kind: AdtKind, c_repr: bool, is_phantom: bool);
/// Fields of ADTs that belong to `selected_builds`.
relation selected_adt_field_types(
    build: Build, item: Item, adt: Type, adt_variant: AdtVariantIndex, adt_def_path: DefPath,
    resolved_adt_def_path: DefPath, field_def_path: DefPath,
    name: InternedString, visibility: TyVisibility, type_kind: TyKind, def_kind: TyDefKind,
    kind: AdtKind, c_repr: bool, is_phantom: bool,
    field_name: InternedString, field_visibility: TyVisibility, field_type: Type,
    field_type_kind: TyKind);
/// The type is core.cell.UnsafeCell.
relation types_unsafe_cell(typ: Type, def_path: DefPath);
/// The type is union.
relation types_union(typ: Type, def_path: DefPath);
/// Unsafe types (types that potentially require knowing their invariants in
/// order to guarantee memory safety).
relation unsafe_types(typ: Type);
/// Safe wrapper types (types that have `unsafe_types` fields, all of which are private).
relation safe_wrapper_types(typ: Type);
/// Unsafe blocks (deduplicates scopes that have `ScopeSafety::ExplicitUnsafe`).
///
/// Note: this relation includes the unsafe blocks generated by the compiler!
relation unsafe_blocks(
    build: Build, mir_body_def_path: DefPath, scope: Scope,
    expansion_kind: SpanExpansionKind, check_mode: BlockCheckMode, span: Span);
/// Relation between functions and their unsafe blocks.
relation functions_unsafe_blocks(
    build: Build, function: Item, scope: Scope,
    expansion_kind: SpanExpansionKind, check_mode: BlockCheckMode);
/// The functions that belong to `selected_builds`.
/// `uses_unsafe` â€“ whether the function uses unsafe code directly in its body.
relation selected_function_definitions(
    build: Build, item: Item, def_path: DefPath, module: Module,
    visibility: TyVisibility, unsafety: Safety, abi: Abi,
    return_ty: Type, uses_unsafe: bool);
/// Statements used inside unsafe blocks.
/// `unsafe_scope` is a foreign key into `unsafe_blocks.scope`.
relation unsafe_statements(
    build: Build, stmt: Statement, block: BasicBlock, index: StatementIndex,
    kind: StatementKind, unsafe_scope: Scope, check_mode: BlockCheckMode);
/// Terminators used inside unsafe blocks.
/// `unsafe_scope` is a foreign key into `unsafe_blocks.scope`.
relation unsafe_terminators(
    build: Build, block: BasicBlock, kind: TerminatorKind, unsafe_scope: Scope,
    check_mode: BlockCheckMode);
/// Function calls inside unsafe blocks.
relation unsafe_block_calls(
    build: Build, block: BasicBlock, unsafe_scope: Scope, check_mode: BlockCheckMode,
    call: FunctionCall, unsafety: Safety, abi: Abi, return_ty: Type);
/// Function calls inside unsafe blocks for which we statically know the
/// precise call target.
relation unsafe_block_calls_known_target(
    build: Build, block: BasicBlock, unsafe_scope: Scope, unsafe_scope_span: Span,
    check_mode: BlockCheckMode, call: FunctionCall, call_target: DefPath,
    unsafety: Safety, abi: Abi, return_ty: Type);
/// Counts of calls in unsafe blocks.
relation unsafe_block_call_counts(
    build: Build, unsafe_scope: Scope, check_mode: BlockCheckMode, call_count: u16);
/// Unsafe blocks that do not call any functions.
relation unsafe_block_no_calls(
    build: Build, mir_body_def_path: DefPath, scope: Scope,
    expansion_kind: SpanExpansionKind, check_mode: BlockCheckMode, span: Span);
/// ADTs that have a `UnsafeCell` field.
relation adts_with_unsafe_cell_fields(
    typ: Type, def_path: DefPath, kind: AdtKind, c_repr: bool,
    field_name: InternedString, field_visibility: TyVisibility, field_type: Type,
    field_type_kind: TyKind, field_def_path: DefPath);
/// Information about function size in terms of MIR statements and terminators.
relation selected_function_sizes(
    build: Build, item: Item, def_path: DefPath,
    visibility: TyVisibility, unsafety: Safety, abi: Abi,
    uses_unsafe: bool,
    statement_count: u64,
    unsafe_statement_count: u64,
    user_unsafe_statement_count: u64,
);
/// Informations about size of a build as a sum of its `selected_function_sizes`.
relation selected_build_sizes(
    build: Build,
    statement_count: u64,
    unsafe_statement_count: u64,
    user_unsafe_statement_count: u64,
);

// New relations for THIR migration:
/// Selected THIR function bodies.
relation selected_thir_bodies(build: Build, item: Item, thir_body_def_path: DefPath, body: ThirBlock);
/// Selected THIR blocks
relation selected_thir_blocks(build: Build, thir_body_def_path: DefPath, parent: ThirBlock, block: ThirBlock, safety: ScopeSafety, check_mode: BlockCheckMode, span: Span);
/// Unsafe (selected) thir blocks
relation unsafe_thir_blocks(build: Build, thir_body_def_path: DefPath, block: ThirBlock, expansion_kind: SpanExpansionKind, check_mode: BlockCheckMode, span: Span);
/// Unsafe thir statements
relation unsafe_thir_stmts(build: Build, stmt: ThirStmt, block: ThirBlock, index: StatementIndex, check_mode: BlockCheckMode);

/// Relation between functions and their unsafe thir blocks.
relation functions_unsafe_thir_blocks(
    build: Build, function: Item, block: ThirBlock,
    expansion_kind: SpanExpansionKind, check_mode: BlockCheckMode);

/// Information about function size in terms of THIR statements.
relation selected_function_thir_sizes(
    build: Build, item: Item, def_path: DefPath,
    visibility: TyVisibility, unsafety: Safety, abi: Abi,
    uses_unsafe: bool,
    statement_count: u64,
    unsafe_statement_count: u64,
    user_unsafe_statement_count: u64,
);
/// Informations about size of a build as a sum of its `selected_function_thir_sizes`.
relation selected_build_thir_sizes(
    build: Build,
    statement_count: u64,
    unsafe_statement_count: u64,
    user_unsafe_statement_count: u64,
);
/// Calls inside unsafe thir blocks
/// call is the call expression, fun is the expression corresponding to the function being called
relation unsafe_thir_block_calls(
    build: Build, block: ThirBlock, check_mode: BlockCheckMode,
    call: ThirExpr, fun: ThirExpr, unsafety: Safety, abi: Abi, return_ty: Type);
/// Counts of calls in unsafe thir blocks.
relation unsafe_thir_block_call_counts(
    build: Build, block: ThirBlock, check_mode: BlockCheckMode, call_count: u16);
/// Unsafe thir blocks that do not call any functions.
relation unsafe_thir_block_no_calls(
    build: Build, thir_body_def_path: DefPath, block: ThirBlock,
    expansion_kind: SpanExpansionKind, check_mode: BlockCheckMode, span: Span);